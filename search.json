[{"path":"https://matutosi.github.io/ecan/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 ecan authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://matutosi.github.io/ecan/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Toshikazu Matsumura. Author, maintainer.","code":""},{"path":"https://matutosi.github.io/ecan/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Matsumura T (2024). ecan: Ecological Analysis Visualization. R package version 0.2.1.9000, https://matutosi.github.io/ecan/, https://github.com/matutosi/ecan https://github.com/matutosi/ecan/tree/develop (devel).","code":"@Manual{,   title = {ecan: Ecological Analysis and Visualization},   author = {Toshikazu Matsumura},   year = {2024},   note = {R package version 0.2.1.9000, https://matutosi.github.io/ecan/},   url = {https://github.com/matutosi/ecan https://github.com/matutosi/ecan/tree/develop (devel)}, }"},{"path":"https://matutosi.github.io/ecan/index.html","id":"ecan","dir":"","previous_headings":"","what":"Ecological Analysis and Visualization","title":"Ecological Analysis and Visualization","text":"goal ecan support ecological analysis.","code":""},{"path":"https://matutosi.github.io/ecan/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Ecological Analysis and Visualization","text":"can use almost functionality shiny. https://matutosi.shinyapps.io/ecanvis/ .","code":"install.packages(\"ecan\")   # development   # install.packages(\"devtools\") devtools::install_github(\"matutosi/ecan\")"},{"path":[]},{"path":"https://matutosi.github.io/ecan/index.html","id":"prepare-and-convert-data","dir":"","previous_headings":"Example","what":"Prepare and convert data","title":"Ecological Analysis and Visualization","text":"","code":"library(ecan) library(vegan) #> Loading required package: permute #> Loading required package: lattice #> This is vegan 2.6-4 library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(stringr) library(tibble) library(ggplot2) data(dune) data(dune.env)  df <-    table2df(dune) %>%   dplyr::left_join(tibble::rownames_to_column(dune.env, \"stand\")) #> Joining with `by = join_by(stand)`  sp_dammy <-   tibble::tibble(\"species\" = colnames(dune),                  \"dammy_1\" = stringr::str_sub(colnames(dune), 1, 1),                 \"dammy_6\" = stringr::str_sub(colnames(dune), 6, 6))  df <-    df %>%   dplyr::left_join(sp_dammy) #> Joining with `by = join_by(species)`  df #> # A tibble: 197 × 10 #>    stand species  abundance    A1 Moisture Manage…¹ Use   Manure dammy_1 dammy_6 #>    <chr> <chr>        <dbl> <dbl> <ord>    <fct>    <ord> <ord>  <chr>   <chr>   #>  1 1     Achimill         1   2.8 1        SF       Hayp… 4      A       i       #>  2 1     Elymrepe         4   2.8 1        SF       Hayp… 4      E       e       #>  3 1     Lolipere         7   2.8 1        SF       Hayp… 4      L       e       #>  4 1     Poaprat          4   2.8 1        SF       Hayp… 4      P       a       #>  5 1     Poatriv          2   2.8 1        SF       Hayp… 4      P       i       #>  6 2     Achimill         3   3.5 1        BF       Hayp… 2      A       i       #>  7 2     Alopgeni         2   3.5 1        BF       Hayp… 2      A       e       #>  8 2     Bellpere         3   3.5 1        BF       Hayp… 2      B       e       #>  9 2     Bromhord         4   3.5 1        BF       Hayp… 2      B       o       #> 10 2     Elymrepe         4   3.5 1        BF       Hayp… 2      E       e       #> # … with 187 more rows, and abbreviated variable name ¹​Management"},{"path":"https://matutosi.github.io/ecan/index.html","id":"diversity-index","dir":"","previous_headings":"Example","what":"Diversity index","title":"Ecological Analysis and Visualization","text":"","code":"div <-    shdi(df) %>%   dplyr::left_join(select_one2multi(df, \"stand\")) #> Joining with `by = join_by(stand)`  group <- \"Management\" div_index <- \"s\" div %>%   ggplot(aes(x = .data[[group]], y = .data[[div_index]])) +      geom_boxplot(outlier.shape = NA) +  # do not show outer point     geom_jitter(height = 0, width = 0.1)"},{"path":"https://matutosi.github.io/ecan/index.html","id":"indicator-species-analysis-isa-ind-val","dir":"","previous_headings":"Example","what":"Indicator Species Analysis (ISA, ind val)","title":"Ecological Analysis and Visualization","text":"","code":"ind_val(df, group = \"Moisture\", row_data = TRUE) #> $relfrq #>                  1    2         3   4 #> Achimill 0.7142857 0.50 0.0000000 0.0 #> Elymrepe 0.4285714 0.50 0.0000000 0.5 #> Lolipere 1.0000000 0.75 0.1428571 0.5 #> Poaprat  1.0000000 1.00 0.2857143 0.5 #> Poatriv  0.7142857 0.75 0.4285714 1.0 #> Alopgeni 0.1428571 0.50 0.4285714 1.0 #> Bellpere 0.4285714 0.75 0.0000000 0.0 #> Bromhord 0.4285714 0.50 0.0000000 0.0 #> Scorautu 0.8571429 1.00 0.8571429 1.0 #> Trifrepe 0.8571429 0.75 0.7142857 1.0 #> Agrostol 0.0000000 0.50 0.8571429 1.0 #> Bracruta 0.7142857 0.75 0.7142857 1.0 #> Cirsarve 0.0000000 0.25 0.0000000 0.0 #> Sagiproc 0.1428571 0.25 0.4285714 1.0 #> Anthodor 0.4285714 0.50 0.1428571 0.0 #> Planlanc 0.7142857 0.50 0.0000000 0.0 #> Rumeacet 0.4285714 0.00 0.0000000 1.0 #> Trifprat 0.4285714 0.00 0.0000000 0.0 #> Juncbufo 0.1428571 0.00 0.1428571 1.0 #> Eleopalu 0.0000000 0.00 0.7142857 0.0 #> Juncarti 0.0000000 0.00 0.5714286 0.5 #> Ranuflam 0.0000000 0.00 0.8571429 0.0 #> Vicilath 0.2857143 0.25 0.0000000 0.0 #> Hyporadi 0.1428571 0.25 0.1428571 0.0 #> Chenalbu 0.0000000 0.00 0.1428571 0.0 #> Comapalu 0.0000000 0.00 0.2857143 0.0 #> Callcusp 0.0000000 0.00 0.4285714 0.0 #> Airaprae 0.0000000 0.25 0.1428571 0.0 #> Salirepe 0.1428571 0.00 0.2857143 0.0 #> Empenigr 0.0000000 0.00 0.1428571 0.0 #>  #> $relabu #>                   1         2          3          4 #> Achimill 0.48780488 0.5121951 0.00000000 0.00000000 #> Elymrepe 0.25531915 0.2978723 0.00000000 0.44680851 #> Lolipere 0.46204620 0.3927393 0.05280528 0.09240924 #> Poaprat  0.35036496 0.3576642 0.08759124 0.20437956 #> Poatriv  0.24806202 0.2713178 0.15503876 0.32558140 #> Alopgeni 0.02846975 0.2241993 0.19928826 0.54804270 #> Bellpere 0.40000000 0.6000000 0.00000000 0.00000000 #> Bromhord 0.39506173 0.6049383 0.00000000 0.00000000 #> Scorautu 0.33922261 0.2226148 0.24028269 0.19787986 #> Trifrepe 0.27636364 0.2290909 0.18909091 0.30545455 #> Agrostol 0.00000000 0.2818792 0.38926174 0.32885906 #> Bracruta 0.29197080 0.1532847 0.24817518 0.30656934 #> Cirsarve 0.00000000 1.0000000 0.00000000 0.00000000 #> Sagiproc 0.05161290 0.2258065 0.18064516 0.54193548 #> Anthodor 0.33333333 0.5185185 0.14814815 0.00000000 #> Planlanc 0.70588235 0.2941176 0.00000000 0.00000000 #> Rumeacet 0.50000000 0.0000000 0.00000000 0.50000000 #> Trifprat 1.00000000 0.0000000 0.00000000 0.00000000 #> Juncbufo 0.06060606 0.0000000 0.09090909 0.84848485 #> Eleopalu 0.00000000 0.0000000 1.00000000 0.00000000 #> Juncarti 0.00000000 0.0000000 0.50000000 0.50000000 #> Ranuflam 0.00000000 0.0000000 1.00000000 0.00000000 #> Vicilath 0.63157895 0.3684211 0.00000000 0.00000000 #> Hyporadi 0.19047619 0.3333333 0.47619048 0.00000000 #> Chenalbu 0.00000000 0.0000000 1.00000000 0.00000000 #> Comapalu 0.00000000 0.0000000 1.00000000 0.00000000 #> Callcusp 0.00000000 0.0000000 1.00000000 0.00000000 #> Airaprae 0.00000000 0.5384615 0.46153846 0.00000000 #> Salirepe 0.27272727 0.0000000 0.72727273 0.00000000 #> Empenigr 0.00000000 0.0000000 1.00000000 0.00000000 #>  #> $indval #>                    1          2           3          4 #> Achimill 0.348432056 0.25609756 0.000000000 0.00000000 #> Elymrepe 0.109422492 0.14893617 0.000000000 0.22340426 #> Lolipere 0.462046205 0.29455446 0.007543612 0.04620462 #> Poaprat  0.350364964 0.35766423 0.025026069 0.10218978 #> Poatriv  0.177187154 0.20348837 0.066445183 0.32558140 #> Alopgeni 0.004067107 0.11209964 0.085409253 0.54804270 #> Bellpere 0.171428571 0.45000000 0.000000000 0.00000000 #> Bromhord 0.169312169 0.30246914 0.000000000 0.00000000 #> Scorautu 0.290762241 0.22261484 0.205956588 0.19787986 #> Trifrepe 0.236883117 0.17181818 0.135064935 0.30545455 #> Agrostol 0.000000000 0.14093960 0.333652924 0.32885906 #> Bracruta 0.208550574 0.11496350 0.177267987 0.30656934 #> Cirsarve 0.000000000 0.25000000 0.000000000 0.00000000 #> Sagiproc 0.007373272 0.05645161 0.077419355 0.54193548 #> Anthodor 0.142857143 0.25925926 0.021164021 0.00000000 #> Planlanc 0.504201681 0.14705882 0.000000000 0.00000000 #> Rumeacet 0.214285714 0.00000000 0.000000000 0.50000000 #> Trifprat 0.428571429 0.00000000 0.000000000 0.00000000 #> Juncbufo 0.008658009 0.00000000 0.012987013 0.84848485 #> Eleopalu 0.000000000 0.00000000 0.714285714 0.00000000 #> Juncarti 0.000000000 0.00000000 0.285714286 0.25000000 #> Ranuflam 0.000000000 0.00000000 0.857142857 0.00000000 #> Vicilath 0.180451128 0.09210526 0.000000000 0.00000000 #> Hyporadi 0.027210884 0.08333333 0.068027211 0.00000000 #> Chenalbu 0.000000000 0.00000000 0.142857143 0.00000000 #> Comapalu 0.000000000 0.00000000 0.285714286 0.00000000 #> Callcusp 0.000000000 0.00000000 0.428571429 0.00000000 #> Airaprae 0.000000000 0.13461538 0.065934066 0.00000000 #> Salirepe 0.038961039 0.00000000 0.207792208 0.00000000 #> Empenigr 0.000000000 0.00000000 0.142857143 0.00000000 #>  #> $maxcls #> Achimill Elymrepe Lolipere  Poaprat  Poatriv Alopgeni Bellpere Bromhord  #>        1        4        1        2        4        4        2        2  #> Scorautu Trifrepe Agrostol Bracruta Cirsarve Sagiproc Anthodor Planlanc  #>        1        4        3        4        2        4        2        1  #> Rumeacet Trifprat Juncbufo Eleopalu Juncarti Ranuflam Vicilath Hyporadi  #>        4        1        4        3        3        3        1        2  #> Chenalbu Comapalu Callcusp Airaprae Salirepe Empenigr  #>        3        3        3        2        3        3  #>  #> $indcls #>   Achimill   Elymrepe   Lolipere    Poaprat    Poatriv   Alopgeni   Bellpere  #> 0.34843206 0.22340426 0.46204620 0.35766423 0.32558140 0.54804270 0.45000000  #>   Bromhord   Scorautu   Trifrepe   Agrostol   Bracruta   Cirsarve   Sagiproc  #> 0.30246914 0.29076224 0.30545455 0.33365292 0.30656934 0.25000000 0.54193548  #>   Anthodor   Planlanc   Rumeacet   Trifprat   Juncbufo   Eleopalu   Juncarti  #> 0.25925926 0.50420168 0.50000000 0.42857143 0.84848485 0.71428571 0.28571429  #>   Ranuflam   Vicilath   Hyporadi   Chenalbu   Comapalu   Callcusp   Airaprae  #> 0.85714286 0.18045113 0.08333333 0.14285714 0.28571429 0.42857143 0.13461538  #>   Salirepe   Empenigr  #> 0.20779221 0.14285714  #>  #> $pval #> Achimill Elymrepe Lolipere  Poaprat  Poatriv Alopgeni Bellpere Bromhord  #>    0.240    0.417    0.062    0.378    0.502    0.053    0.131    0.190  #> Scorautu Trifrepe Agrostol Bracruta Cirsarve Sagiproc Anthodor Planlanc  #>    0.797    0.698    0.383    0.614    0.286    0.072    0.311    0.107  #> Rumeacet Trifprat Juncbufo Eleopalu Juncarti Ranuflam Vicilath Hyporadi  #>    0.092    0.136    0.004    0.024    0.214    0.001    0.699    1.000  #> Chenalbu Comapalu Callcusp Airaprae Salirepe Empenigr  #>    1.000    0.449    0.072    0.755    0.594    1.000  #>  #> $error #> [1] 0 #>  #> attr(,\"class\") #> [1] \"indval\" ind_val(df, group = \"Management\") #> Joining with `by = join_by(numeric_Management)` #> # A tibble: 30 × 4 #>    Management species  ind.val p.value #>    <fct>      <chr>      <dbl>   <dbl> #>  1 SF         Elymrepe   0.188   0.684 #>  2 SF         Alopgeni   0.547   0.038 #>  3 SF         Agrostol   0.472   0.054 #>  4 SF         Cirsarve   0.167   1     #>  5 SF         Sagiproc   0.241   0.514 #>  6 SF         Chenalbu   0.167   1     #>  7 BF         Achimill   0.386   0.118 #>  8 BF         Lolipere   0.45    0.07  #>  9 BF         Poaprat    0.379   0.188 #> 10 BF         Bellpere   0.362   0.126 #> # … with 20 more rows ind_val(df, group = \"Use\") #> Joining with `by = join_by(numeric_Use)` #> # A tibble: 30 × 4 #>    Use      species  ind.val p.value #>    <ord>    <chr>      <dbl>   <dbl> #>  1 Haypastu Elymrepe   0.292   0.288 #>  2 Haypastu Lolipere   0.259   0.796 #>  3 Haypastu Poaprat    0.288   0.824 #>  4 Haypastu Poatriv    0.451   0.118 #>  5 Haypastu Alopgeni   0.359   0.184 #>  6 Haypastu Agrostol   0.269   0.589 #>  7 Haypastu Cirsarve   0.125   1     #>  8 Haypastu Sagiproc   0.178   0.8   #>  9 Haypastu Juncbufo   0.118   0.848 #> 10 Haypastu Chenalbu   0.125   1     #> # … with 20 more rows ind_val(df, group = \"Manure\") #> Joining with `by = join_by(numeric_Manure)` #> # A tibble: 30 × 4 #>    Manure species  ind.val p.value #>    <ord>  <chr>      <dbl>   <dbl> #>  1 4      Elymrepe   0.5     0.048 #>  2 4      Lolipere   0.351   0.211 #>  3 4      Poaprat    0.315   0.28  #>  4 4      Bellpere   0.248   0.469 #>  5 4      Cirsarve   0.333   0.279 #>  6 2      Achimill   0.309   0.262 #>  7 2      Poatriv    0.299   0.394 #>  8 2      Bromhord   0.173   0.703 #>  9 2      Anthodor   0.178   0.763 #> 10 2      Rumeacet   0.522   0.041 #> # … with 20 more rows"},{"path":"https://matutosi.github.io/ecan/index.html","id":"cluster-analysis","dir":"","previous_headings":"Example","what":"Cluster analysis","title":"Ecological Analysis and Visualization","text":"","code":"library(ggdendro) library(dendextend) #> Registered S3 method overwritten by 'dendextend': #>   method     from  #>   rev.hclust vegan #>  #> --------------------- #> Welcome to dendextend version 1.16.0 #> Type citation('dendextend') for how to cite the package. #>  #> Type browseVignettes(package = 'dendextend') for the package vignette. #> The github page is: https://github.com/talgalili/dendextend/ #>  #> Suggestions and bug-reports can be submitted at: https://github.com/talgalili/dendextend/issues #> You may ask questions at stackoverflow, use the r and dendextend tags:  #>   https://stackoverflow.com/questions/tagged/dendextend #>  #>  To suppress this message use:  suppressPackageStartupMessages(library(dendextend)) #> --------------------- #>  #> Attaching package: 'dendextend' #> The following object is masked from 'package:ggdendro': #>  #>     theme_dendro #> The following object is masked from 'package:permute': #>  #>     shuffle #> The following object is masked from 'package:stats': #>  #>     cutree  cls <- cluster(dune, c_method = \"average\", d_method = \"euclidean\") ggdendro::ggdendrogram(cls) indiv <- \"stand\" group <- \"Use\"  ggdendro::ggdendrogram(cls_add_group(cls, df, indiv, group)) #> Joining with `by = join_by(stand)` col <- cls_color(cls, df, indiv, group) #> Joining with `by = join_by(stand)` #> Joining with `by = join_by(Use)` cls <-    cls_add_group(cls, df, indiv, group) %>%   stats::as.dendrogram() #> Joining with `by = join_by(stand)` labels_colors(cls) <- gray(0)  plot(cls) dendextend::colored_bars(colors = col, cls, group, y_shift = 0,  y_scale = 3) par(new = TRUE) plot(cls)"},{"path":"https://matutosi.github.io/ecan/index.html","id":"ordination","dir":"","previous_headings":"Example","what":"Ordination","title":"Ecological Analysis and Visualization","text":"","code":"ord_dca <- ordination(dune, o_method = \"dca\") ord_pca <-   df %>%   df2table() %>%   ordination(o_method = \"pca\")  ord_dca_st <-    ord_extract_score(ord_dca, score = \"st_scores\")  ord_dca_st %>%   ggplot(aes(DCA1, DCA2, label = rownames(.))) +   geom_text() indiv <- \"species\" group <- \"dammy_1\" ord_pca_sp <-    ord_add_group(ord_pca, score = \"sp_scores\", df, indiv, group) #> Joining with `by = join_by(species)`  ord_pca_sp %>%   ggplot(aes(PC1, PC2, label = rownames(.))) +   geom_point(aes(col = .data[[group]]), alpha = 0.4, size = 7) +   geom_text() +   theme_bw()"},{"path":"https://matutosi.github.io/ecan/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Ecological Analysis and Visualization","text":"Toshikazu Matsumura (2022) Ecological analysis tools R. https://github.com/matutosi/ecan/.","code":""},{"path":"https://matutosi.github.io/ecan/reference/cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for clustering methods — cluster","title":"Helper function for clustering methods — cluster","text":"Helper function clustering methods Helper function calculate distance Add group names hclust labels. Add colors dendrogram","code":""},{"path":"https://matutosi.github.io/ecan/reference/cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for clustering methods — cluster","text":"","code":"cluster(x, c_method, d_method)  distance(x, d_method)  cls_add_group(cls, df, indiv, group, pad = TRUE)  cls_color(cls, df, indiv, group)"},{"path":"https://matutosi.github.io/ecan/reference/cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for clustering methods — cluster","text":"x community data matrix. rownames: stands. colnames: species. c_method string clustering method. \"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\" (= UPGMA), \"mcquitty\" (= WPGMA), \"median\" (= WPGMC), \"centroid\" (= UPGMC), \"diana\". d_method string distance method. \"correlation\", \"manhattan\", \"euclidean\", \"canberra\", \"clark\", \"bray\", \"kulczynski\", \"jaccard\", \"gower\", \"altGower\", \"morisita\", \"horn\", \"mountford\", \"raup\", \"binomial\", \"chao\", \"cao\", \"mahalanobis\", \"chisq\", \"chord\", \"aitchison\", \"robust.aitchison\". cls result cluster dendrogram. df data.frame added ord scores indiv, group string specify individual group name column df. pad logical specify padding strings.","code":""},{"path":"https://matutosi.github.io/ecan/reference/cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for clustering methods — cluster","text":"cluster() returns result clustering. $clustering_method: c_method $distance_method:   d_method distance() returns distance matrix.","code":"Inputing cls return a color vector,             inputing dend return a dend with color."},{"path":"https://matutosi.github.io/ecan/reference/cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for clustering methods — cluster","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union df <-    tibble::tibble(   stand = paste0(\"ST_\", c(\"A\", \"A\", \"A\", \"B\", \"B\", \"C\", \"C\", \"C\", \"C\")), species = paste0(\"sp_\", c(\"a\", \"e\", \"d\", \"e\", \"b\", \"e\", \"d\", \"b\", \"a\")),   abundance = c(3, 3, 1, 9, 5, 4, 3, 3, 1)) cls <-    df2table(df) %>%   cluster(c_method = \"average\", d_method = \"bray\") library(ggdendro) # show standard cluster ggdendro::ggdendrogram(cls)   # show cluster with group data(dune, package = \"vegan\") data(dune.env, package = \"vegan\") cls <-    cluster(dune, c_method = \"average\", d_method = \"bray\") df <- tibble::rownames_to_column(dune.env, \"stand\") cls <- cls_add_group(cls, df, indiv = \"stand\", group = \"Use\") #> Joining with `by = join_by(stand)` ggdendro::ggdendrogram(cls)  # }"},{"path":"https://matutosi.github.io/ecan/reference/d.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculating diversity — d","title":"Calculating diversity — d","text":"Calculating diversity","code":""},{"path":"https://matutosi.github.io/ecan/reference/d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculating diversity — d","text":"","code":"d(x)  h(x, base = exp(1))"},{"path":"https://matutosi.github.io/ecan/reference/d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculating diversity — d","text":"x, base numeric vector.","code":""},{"path":"https://matutosi.github.io/ecan/reference/d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculating diversity — d","text":"numeric vector.","code":""},{"path":"https://matutosi.github.io/ecan/reference/df2table.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data.frame and table to each other. — df2table","title":"Convert data.frame and table to each other. — df2table","text":"Convert data.frame table .","code":""},{"path":"https://matutosi.github.io/ecan/reference/df2table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data.frame and table to each other. — df2table","text":"","code":"df2table(df, st = \"stand\", sp = \"species\", ab = \"abundance\")  table2df(tbl, st = \"stand\", sp = \"species\", ab = \"abundance\")  dist2df(dist)"},{"path":"https://matutosi.github.io/ecan/reference/df2table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data.frame and table to each other. — df2table","text":"df data.frame. st, sp, ab string. tbl table. community matrix. rownames: stands. colnames: species. dist distance table.","code":""},{"path":"https://matutosi.github.io/ecan/reference/df2table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data.frame and table to each other. — df2table","text":"","code":"df2table() return table, table2df() return data.frame, dist2df() return data.frame."},{"path":"https://matutosi.github.io/ecan/reference/df2table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data.frame and table to each other. — df2table","text":"","code":"tibble::tibble(    st = paste0(\"st_\", rep(1:2, times = 2)),     sp = paste0(\"sp_\", rep(1:2, each = 2)),     ab = runif(4)) %>%   dplyr::bind_rows(., .) %>%   print() %>%   df2table(\"st\", \"sp\", \"ab\") #> # A tibble: 8 × 3 #>   st    sp        ab #>   <chr> <chr>  <dbl> #> 1 st_1  sp_1  0.0808 #> 2 st_2  sp_1  0.834  #> 3 st_1  sp_2  0.601  #> 4 st_2  sp_2  0.157  #> 5 st_1  sp_1  0.0808 #> 6 st_2  sp_1  0.834  #> 7 st_1  sp_2  0.601  #> 8 st_2  sp_2  0.157  #>           sp_1      sp_2 #> st_1 0.1615003 1.2015218 #> st_2 1.6686661 0.3144169"},{"path":"https://matutosi.github.io/ecan/reference/draw_layer_construction.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw layer construction plot — draw_layer_construction","title":"Draw layer construction plot — draw_layer_construction","text":"Draw layer construction plot Add mid point bin width layer heights. Compute mid point layer heights. Compute bin width layer heights.","code":""},{"path":"https://matutosi.github.io/ecan/reference/draw_layer_construction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw layer construction plot — draw_layer_construction","text":"","code":"draw_layer_construction(   df,   stand = \"stand\",   height = \"height\",   cover = \"cover\",   group = \"\",   ... )  add_mid_p_bin_w(df, height = \"height\")  mid_point(x)  bin_width(x)"},{"path":"https://matutosi.github.io/ecan/reference/draw_layer_construction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw layer construction plot — draw_layer_construction","text":"df dataframe including columns: stand, layer height cover. Optional column: stand group. stand, height, cover, group string specify stand, height, cover, group column. ... Extra arguments geom_bar(). x numeric vector.","code":""},{"path":"https://matutosi.github.io/ecan/reference/draw_layer_construction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw layer construction plot — draw_layer_construction","text":"draw_layer_construction() returns gg object, add_mid_p_bin_w() returns dataframe including mid_point bin_width columns. mid_point() bin_width() return numeric vector.","code":""},{"path":"https://matutosi.github.io/ecan/reference/draw_layer_construction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw layer construction plot — draw_layer_construction","text":"","code":"library(dplyr) n <- 10 height_max <- 20 ly_list    <- c(\"B\", \"S\", \"K\") st_list    <- LETTERS[1] sp_list    <- letters[1:9] st_group   <- NULL sp_group   <- rep(letters[24:26], 3) cover_list <- 2^(0:4) df <- gen_example(n = n, use_layer = TRUE,                   height_max = height_max, ly_list = ly_list,                   st_list  = st_list,  sp_list  = sp_list,                   st_group = st_group, sp_group = sp_group,                   cover_list = cover_list) #> Joining with `by = join_by(stand)` #> Joining with `by = join_by(stand, layer)` #> Joining with `by = join_by(species)`  # select stand and summarise by sp_group df %>%   dplyr::group_by(height, sp_group) %>%   dplyr::summarise(cover = sum(cover), .groups = \"drop\") %>%   draw_layer_construction(group = \"sp_group\", colour = \"white\") #> Joining with `by = join_by(height)`"},{"path":"https://matutosi.github.io/ecan/reference/gen_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate vegetation example — gen_example","title":"Generate vegetation example — gen_example","text":"Stand, species, cover basic. Layer, height, st_group, sp_group optional.","code":""},{"path":"https://matutosi.github.io/ecan/reference/gen_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate vegetation example — gen_example","text":"","code":"gen_example(   n = 300,   use_layer = TRUE,   height_max = 20,   ly_list = \"\",   st_list = LETTERS[1:9],   sp_list = letters[1:9],   st_group = NULL,   sp_group = NULL,   cover_list = 2^(0:6) )"},{"path":"https://matutosi.github.io/ecan/reference/gen_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate vegetation example — gen_example","text":"n numeric generate occurrences. use_layer logical. FALSE, height_max ly_list omitted. height_max numeric. highest layer samples. ly_list, st_list, sp_list, st_group, sp_group string vector. st_group sp_group optional (default NULL). Length st_list sp_list st_group sp_group, respectively. cover_list numeric vector.","code":""},{"path":"https://matutosi.github.io/ecan/reference/gen_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate vegetation example — gen_example","text":"dataframe columns: stand, layer, species, cover, st_group sp_group.","code":""},{"path":"https://matutosi.github.io/ecan/reference/gen_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate vegetation example — gen_example","text":"","code":"n <- 300 height_max <- 20 ly_list    <- c(\"B1\", \"B2\", \"S1\", \"S2\", \"K\") st_list    <- LETTERS[1:9] sp_list    <- letters[1:9] st_group   <- rep(LETTERS[24:26], 3) sp_group   <- rep(letters[24:26], 3) cover_list <- 2^(0:6) gen_example(n = n, use_layer = TRUE,             height_max = height_max, ly_list = ly_list,              st_list  = st_list,  sp_list  = sp_list,             st_group = st_group, sp_group = sp_group,             cover_list = cover_list) #> Joining with `by = join_by(stand)` #> Joining with `by = join_by(stand, layer)` #> Joining with `by = join_by(species)` #> # A tibble: 217 × 7 #>    stand layer species cover st_group height sp_group #>    <chr> <chr> <chr>   <dbl> <chr>     <dbl> <chr>    #>  1 A     B1    c       32    X          19.7 z        #>  2 A     B1    i        4    X          19.7 z        #>  3 A     B1    d        3    X          19.7 x        #>  4 A     B1    f        2    X          19.7 z        #>  5 A     B1    g        2    X          19.7 x        #>  6 A     B2    f       64    X          16.3 z        #>  7 A     B2    e       32    X          16.3 y        #>  8 A     B2    a        2    X          16.3 x        #>  9 A     B2    g        2    X          16.3 x        #> 10 A     B2    c        1.33 X          16.3 z        #> # ℹ 207 more rows"},{"path":"https://matutosi.github.io/ecan/reference/ind_val.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for Indicator Species Analysis — ind_val","title":"Helper function for Indicator Species Analysis — ind_val","text":"Calculating diversity indices species richness (s), Shannon's H' (h), Simpson' D (d), Simpson's inverse D ().","code":""},{"path":"https://matutosi.github.io/ecan/reference/ind_val.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for Indicator Species Analysis — ind_val","text":"","code":"ind_val(   df,   stand = NULL,   species = NULL,   abundance = NULL,   group = NULL,   row_data = FALSE )"},{"path":"https://matutosi.github.io/ecan/reference/ind_val.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for Indicator Species Analysis — ind_val","text":"df data.frame, three cols: stand, species, abundance. Community matrix converted using table2df(). stand, species, abundance text specify column. NULL, 1st, 2nd, 3rd column used. group text specify group column. row_data logical. TRUE: return row result data labdsv::indval().","code":""},{"path":"https://matutosi.github.io/ecan/reference/ind_val.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for Indicator Species Analysis — ind_val","text":"data.frame.","code":""},{"path":"https://matutosi.github.io/ecan/reference/ind_val.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for Indicator Species Analysis — ind_val","text":"","code":"# \\donttest{ library(dplyr) library(tibble) data(dune, package = \"vegan\") data(dune.env, package = \"vegan\") df <-    dune %>%   table2df(st = \"stand\", sp = \"species\", ab = \"cover\") %>%   dplyr::left_join(tibble::rownames_to_column(dune.env, \"stand\")) #> Joining with `by = join_by(stand)` ind_val(df, abundance = \"cover\", group = \"Moisture\") #> Joining with `by = join_by(numeric_Moisture)` #> # A tibble: 30 × 4 #>    Moisture species  ind.val p.value #>    <ord>    <chr>      <dbl>   <dbl> #>  1 1        Achimill   0.348   0.208 #>  2 1        Lolipere   0.462   0.062 #>  3 1        Scorautu   0.291   0.793 #>  4 1        Planlanc   0.504   0.1   #>  5 1        Trifprat   0.429   0.14  #>  6 1        Vicilath   0.180   0.674 #>  7 2        Poaprat    0.358   0.345 #>  8 2        Bellpere   0.45    0.136 #>  9 2        Bromhord   0.302   0.179 #> 10 2        Cirsarve   0.25    0.3   #> # ℹ 20 more rows # }"},{"path":"https://matutosi.github.io/ecan/reference/is_one2multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Check cols one-to-one, or one-to-multi in data.frame — is_one2multi","title":"Check cols one-to-one, or one-to-multi in data.frame — is_one2multi","text":"Check cols one--one, one--multi data.frame","code":""},{"path":"https://matutosi.github.io/ecan/reference/is_one2multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check cols one-to-one, or one-to-multi in data.frame — is_one2multi","text":"","code":"is_one2multi(df, col_1, col_2)  is_one2one(df, col_1, col_2)  is_multi2multi(df, col_1, col_2)  cols_one2multi(df, col, inculde_self = TRUE)  select_one2multi(df, col, inculde_self = TRUE)  unique_length(df, col_1, col_2)"},{"path":"https://matutosi.github.io/ecan/reference/is_one2multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check cols one-to-one, or one-to-multi in data.frame — is_one2multi","text":"df data.frame col, col_1, col_2 string specify colname. inculde_self logical. TRUE, return value including input col.","code":""},{"path":"https://matutosi.github.io/ecan/reference/is_one2multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check cols one-to-one, or one-to-multi in data.frame — is_one2multi","text":"is_one2multi(), is_one2one(), is_multi2multi()  return logical. cols_one2multi() returns strings colnames one2multi relation input col. unique_length() returns list.","code":""},{"path":"https://matutosi.github.io/ecan/reference/is_one2multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check cols one-to-one, or one-to-multi in data.frame — is_one2multi","text":"","code":"df <- tibble::tibble(   x     = rep(letters[1:6], each = 1),   x_grp = rep(letters[1:3], each = 2),   y     = rep(LETTERS[1:3], each = 2),   y_grp = rep(LETTERS[1:3], each = 2),   z      = rep(LETTERS[1:3], each = 2),   z_grp  = rep(LETTERS[1:3], times = 2))  unique_length(df, \"x\", \"x_grp\") #> $x #> [1] 6 #>  #> $y #> [1] 3 #>  #> $xy #> [1] 6 #>   is_one2one(df, \"x\", \"x_grp\") #> [1] FALSE is_one2one(df, \"y\", \"y_grp\") #> [1] TRUE is_one2one(df, \"z\", \"z_grp\") #> [1] FALSE"},{"path":"https://matutosi.github.io/ecan/reference/ordination.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for ordination methods — ordination","title":"Helper function for ordination methods — ordination","text":"Helper function ordination methods","code":""},{"path":"https://matutosi.github.io/ecan/reference/ordination.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for ordination methods — ordination","text":"","code":"ordination(tbl, o_method, d_method = NULL, ...)  ord_plot(ord, score = \"st_scores\", x = 1, y = 2)  ord_add_group(ord, score = \"st_scores\", df, indiv, group)  ord_extract_score(ord, score = \"st_scores\", row_name = NULL)"},{"path":"https://matutosi.github.io/ecan/reference/ordination.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for ordination methods — ordination","text":"tbl community data matrix. rownames: stands. colnames: species. o_method string ordination method. \"pca\", \"ca\", \"dca\", \"pcoa\", \"nmds\". \"fspa\" removed, package dave archived. d_method string distance method. \"correlation\", \"manhattan\", \"euclidean\", \"canberra\", \"clark\", \"bray\", \"kulczynski\", \"jaccard\", \"gower\", \"altGower\", \"morisita\", \"horn\", \"mountford\", \"raup\", \"binomial\", \"chao\", \"cao\", \"mahalanobis\", \"chisq\", \"chord\", \"aitchison\", \"robust.aitchison\". ... parameters PCA. ord result ordination(). score string specify score plot. \"st_scores\" means stands \"sp_scores\" species. x, y column number x y axis. df data.frame added ord scores indiv, group, row_name string specify indiv, group, row_name column df.","code":""},{"path":"https://matutosi.github.io/ecan/reference/ordination.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for ordination methods — ordination","text":"ordination() returns result ordination. $st_scores:         scores stand. $sp_scores:         scores species. $eig_val:           eigen value stand. $results_raw:       results original ordination function. $ordination_method: o_method. $distance_method:   d_method. ord_plot() returns ggplot2 object. ord_extract_score() extracts stand species scores ordination result. ord_add_group() adds group data.frame ordination scores.","code":""},{"path":"https://matutosi.github.io/ecan/reference/ordination.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for ordination methods — ordination","text":"","code":"# \\donttest{ library(ggplot2) library(vegan) #> Loading required package: permute #> Loading required package: lattice #> This is vegan 2.6-8 data(dune) data(dune.env)  df <-    table2df(dune) %>%   dplyr::left_join(tibble::rownames_to_column(dune.env, \"stand\")) #> Joining with `by = join_by(stand)` sp_dammy <-   tibble::tibble(\"species\" = colnames(dune),                  \"dammy_1\" = stringr::str_sub(colnames(dune), 1, 1),                 \"dammy_6\" = stringr::str_sub(colnames(dune), 6, 6)) df <- dplyr::left_join(df, sp_dammy) #> Joining with `by = join_by(species)`  ord_dca <- ordination(dune, o_method = \"dca\") ord_pca <-    df %>%   df2table() %>%   ordination(o_method = \"pca\")  ord_dca_st <-    ord_extract_score(ord_dca, score = \"st_scores\") ord_pca_sp <-    ord_add_group(ord_pca,    score = \"sp_scores\", df, indiv = \"species\", group = \"dammy_1\") #> Joining with `by = join_by(species)` # }"},{"path":"https://matutosi.github.io/ecan/reference/pad2longest.html","id":null,"dir":"Reference","previous_headings":"","what":"Pad a string to the longest width of the strings. — pad2longest","title":"Pad a string to the longest width of the strings. — pad2longest","text":"Pad string longest width strings.","code":""},{"path":"https://matutosi.github.io/ecan/reference/pad2longest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pad a string to the longest width of the strings. — pad2longest","text":"","code":"pad2longest(string, side = \"right\", pad = \" \")"},{"path":"https://matutosi.github.io/ecan/reference/pad2longest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pad a string to the longest width of the strings. — pad2longest","text":"string Strings. side Side padding character added (left, right ). pad Single padding character (default spaces).","code":""},{"path":"https://matutosi.github.io/ecan/reference/pad2longest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pad a string to the longest width of the strings. — pad2longest","text":"","code":"Strings."},{"path":"https://matutosi.github.io/ecan/reference/pad2longest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pad a string to the longest width of the strings. — pad2longest","text":"","code":"x <- c(\"a\", \"ab\", \"abc\") pad2longest(x, side = \"right\", pad = \" \") #> [1] \"a  \" \"ab \" \"abc\""},{"path":"https://matutosi.github.io/ecan/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://matutosi.github.io/ecan/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://matutosi.github.io/ecan/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://matutosi.github.io/ecan/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://matutosi.github.io/ecan/reference/read_biss.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from BiSS (Biodiversity Investigation Support System) to data frame. — read_biss","title":"Read data from BiSS (Biodiversity Investigation Support System) to data frame. — read_biss","text":"BiSS data formatted JSON.","code":""},{"path":"https://matutosi.github.io/ecan/reference/read_biss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from BiSS (Biodiversity Investigation Support System) to data frame. — read_biss","text":"","code":"read_biss(txt, join = TRUE)"},{"path":"https://matutosi.github.io/ecan/reference/read_biss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from BiSS (Biodiversity Investigation Support System) to data frame. — read_biss","text":"txt JSON string, URL file. join logical. TRUE: join plot occurrence, FALSE: join.","code":""},{"path":"https://matutosi.github.io/ecan/reference/read_biss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from BiSS (Biodiversity Investigation Support System) to data frame. — read_biss","text":"data frame.","code":""},{"path":"https://matutosi.github.io/ecan/reference/read_biss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data from BiSS (Biodiversity Investigation Support System) to data frame. — read_biss","text":"","code":"library(dplyr) # path <- \"set file path\" path <- \"https://raw.githubusercontent.com/matutosi/biodiv/main/man/example.json\" read_biss(path) #> Warning: JSON string contains (illegal) UTF8 byte-order-mark! #> Joining with `by = join_by(PLOT, Photo, Memo)` #>     PLOT NO Investigator    Location Altitude Aspect Inclination T1_height #> 1 biss01  1              Kobe, Jaoan       50      N          15        15 #> 2 biss01  1              Kobe, Jaoan       50      N          15        15 #> 3 biss01  1              Kobe, Jaoan       50      N          15        15 #> 4 biss02  2              Kobe, Jaoan      100      S          10        12 #> 5 biss02  2              Kobe, Jaoan      100      S          10        12 #> 6 biss02  2              Kobe, Jaoan      100      S          10        12 #>   T2_height S1_height S2_height H_height T1_cover T2_cover S1_cover S2_cover #> 1        12         8         2      0.5       90       30       40       10 #> 2        12         8         2      0.5       90       30       40       10 #> 3        12         8         2      0.5       90       30       40       10 #> 4        10         6       1.8      0.3       90       20       30       10 #> 5        10         6       1.8      0.3       90       20       30       10 #> 6        10         6       1.8      0.3       90       20       30       10 #>   H_cover Photo Memo Layer Species Cover Abundance Rank Sampled Identified #> 1      10               T1     sp1    80                  false       true #> 2      10               T2     sp2    40                  false       true #> 3      10                H     sp3                        false       true #> 4      50                H     sp3                        false       true #> 5      50                H     sp4   1.5                  false       true #> 6      50                H     sp5   0.5                  false       true #>   SameAs #> 1        #> 2        #> 3        #> 4        #> 5        #> 6"},{"path":"https://matutosi.github.io/ecan/reference/shdi.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for calculating diversity — shdi","title":"Helper function for calculating diversity — shdi","text":"Calculating diversity indices species richness (s), Shannon's H' (h), Simpson' D (d), Simpson's inverse D ().","code":""},{"path":"https://matutosi.github.io/ecan/reference/shdi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for calculating diversity — shdi","text":"","code":"shdi(df, stand = NULL, species = NULL, abundance = NULL)"},{"path":"https://matutosi.github.io/ecan/reference/shdi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for calculating diversity — shdi","text":"df data.frame, three cols: stand, species, abundance. Community matrix converted using table2df(). stand, species, abundance text specify column. NULL, 1st, 2nd, 3rd column used.","code":""},{"path":"https://matutosi.github.io/ecan/reference/shdi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for calculating diversity — shdi","text":"data.frame. Including species richness (s), Shannon's H' (h), Simpson' D (d), Simpson's inverse D ().","code":""},{"path":"https://matutosi.github.io/ecan/reference/shdi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function for calculating diversity — shdi","text":"","code":"data(dune, package = \"vegan\") df <- table2df(dune) shdi(df) #> # A tibble: 20 × 5 #>    stand     s     h     d     i #>    <chr> <int> <dbl> <dbl> <dbl> #>  1 1         5  1.44 0.735  3.77 #>  2 10       12  2.40 0.903 10.3  #>  3 11        9  2.11 0.867  7.53 #>  4 12        9  2.11 0.869  7.61 #>  5 13       10  2.10 0.852  6.76 #>  6 14        7  1.86 0.833  6    #>  7 15        8  1.98 0.851  6.70 #>  8 16        8  1.96 0.843  6.37 #>  9 17        7  1.88 0.836  6.08 #> 10 18        9  2.08 0.861  7.22 #> 11 19        9  2.13 0.874  7.94 #> 12 2        10  2.25 0.890  9.09 #> 13 20        8  2.05 0.868  7.57 #> 14 3        10  2.19 0.879  8.25 #> 15 4        13  2.43 0.901 10.1  #> 16 5        14  2.54 0.914 11.6  #> 17 6        11  2.35 0.900 10.0  #> 18 7        13  2.47 0.908 10.8  #> 19 8        12  2.43 0.909 11.0  #> 20 9        13  2.49 0.912 11.3"},{"path":"https://matutosi.github.io/ecan/news/index.html","id":"ecan-021","dir":"Changelog","previous_headings":"","what":"ecan 0.2.1","title":"ecan 0.2.1","text":"CRAN release: 2023-07-07 2023-07-07 Removed method “fsap” ordination(), package dave archived.","code":""},{"path":"https://matutosi.github.io/ecan/news/index.html","id":"ecan-020","dir":"Changelog","previous_headings":"","what":"ecan 0.2.0","title":"ecan 0.2.0","text":"CRAN release: 2023-03-23 2023-03-16 Bug fix Release CRAN","code":""},{"path":"https://matutosi.github.io/ecan/news/index.html","id":"ecan-010","dir":"Changelog","previous_headings":"","what":"ecan 0.1.0","title":"ecan 0.1.0","text":"2022-05-24 First release Panels: Read data, Diversity, ISA (ind val), Cluster, Ordination. Can download data. Can show groups.","code":""}]
